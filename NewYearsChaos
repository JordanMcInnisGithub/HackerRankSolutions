using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Problem link: https://www.hackerrank.com/challenges/new-year-chaos/problem
     * Complete the 'minimumBribes' function below.
     *
     * The function accepts INTEGER_ARRAY q as parameter.
     */

    public static void minimumBribes(List<int> q)
    {
        int bribes = 0;
        int safeStart = 0;
        Restart:
            for (int i = safeStart; i < q.Count; i++)
            {
                int actualOrder = i + 1;
                
                if (q[i] > actualOrder)
                {
                    int bribesNeeded = (q[i] - actualOrder);
                    if (bribesNeeded > 2)
                    {
                        Console.WriteLine("Too chaotic");
                        return;
                    }
                    else
                    {
                        if (q[i] > q[i+1])
                        {
                            bribes++;
                           int temp = q[i];
                           q[i] = q[i+1];
                           q[i+1] = temp;
                           goto Restart;
                        }
                    }
                }
                else if (q[i] == actualOrder && (safeStart + 1 == i)) safeStart++;
            }
        
            Console.WriteLine(bribes);
    }
    

}

class Solution
{
    public static void Main(string[] args)
    {
        int t = Convert.ToInt32(Console.ReadLine().Trim());

        for (int tItr = 0; tItr < t; tItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            List<int> q = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(qTemp => Convert.ToInt32(qTemp)).ToList();

            Result.minimumBribes(q);
        }
    }
}
