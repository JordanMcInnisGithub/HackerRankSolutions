using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'countInversions' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static long countInversions(List<int> arr)
    {
        int[] temp = new int[arr.Count];
        
        return mergeSort(arr.ToArray(), temp, 0, arr.Count-1);
        
        //return getSimpleInv(arr);
    }
    
    static int getSimpleInv(List<int> arr)
    {
        int invCount = 0;
         for (int i = 0; i < arr.Count - 1; i++)
         {
             for (int j = i + 1; j < arr.Count; j++)
             {
                 if (arr[i] > arr[j])
                 {
                     invCount++;
                 }
             }
         }
         return invCount;
    }
    static long mergeSort(int[] arr, int[] temp, int left, int right)
    {
        int mid;
        long invCount = 0;
    
        if (right > left)
        {
            // divide into two parts and call countInv for each part
            
            mid = (right + left) / 2;
            
            invCount += mergeSort(arr, temp, left, mid);
            invCount += mergeSort(arr, temp, mid + 1, right);
            
            // merge the two parts together
            invCount += merge(arr, temp, left, mid + 1, right);
        }
        return invCount;
    }
    
    static long merge(int[] arr, int[] temp, int left, int mid, int right)
    {
        int i, j, k;
        long invCount = 0;
        i = left; // left array
        j = mid; // right array
        k = left; // resultant merged array
        
        while ((i <= mid - 1) && (j <= right))
        {
            if (arr[i] <= arr[j])
            {
                temp[k++] = arr[i++];
            }
            else
            {
                temp[k++] = arr[j++];
                
                invCount = invCount + (mid - i);
            }
        }
        
        // copy remaining elemnts of left subarray to temp
        while (i <= mid - 1)
            temp[k++] = arr[i++];
        
        // copy remaining elemnts of right subarray to temp
        while (j <= right)
            temp[k++] = arr[j++];
            
        // copy the temp back to og
        for (i = left; i <= right; i++)
            arr[i] = temp[i];
            
        return invCount;
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int t = Convert.ToInt32(Console.ReadLine().Trim());

        for (int tItr = 0; tItr < t; tItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

            long result = Result.countInversions(arr);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
